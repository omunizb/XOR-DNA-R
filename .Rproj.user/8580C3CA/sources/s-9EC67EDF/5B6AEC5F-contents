library(readr)
library(tidyverse)

# encoding
binary <- read_file("binary.txt")

if (nchar(binary) %% 2) {
  binary <- substr(binary, 1, nchar(binary) - 1)
}
  
binary
sub_bin <- substring(binary, seq(1, nchar(binary), 2), seq(2, nchar(binary), 2)) 
DNAseq <- ""
for (i in 1:length(sub_bin)) {
  if (sub_bin[i] == "00") {
    DNAseq <- paste0(DNAseq, "A")
  }
  else if (sub_bin[i] == "01") {
    DNAseq <- paste0(DNAseq, "C")
  }
  else if (sub_bin[i] == "10") {
    DNAseq <- paste0(DNAseq, "G")
  }
  else if (sub_bin[i] == "11") {
    DNAseq <- paste0(DNAseq, "T")
  }
  else {
    stop("Input must be a string of binary code")
  }
}
DNAseq

# Back to binary to perform encoding

DNA_split <- unlist(str_split(DNAseq, boundary("character")))

fragment1 <- DNA_split[-seq(from = 1, to = length(DNA_split), by = 4)]
fragment2 <- DNA_split[seq(from = 1, to = length(DNA_split), by = 4)]

dna_to_bin <- function(x) {
  x_bin <- vector(mode = "numeric", length = length(x))
  for (i in 1:length(x)) {
    if (x[i] %in% "A") {
      x_bin[i] <- 0
    }
    else if (x[i] %in% "C") {
      x_bin[i] <- 1
    }
    else if (x[i] %in% "G") {
      x_bin[i] <- 10
    }
    else {
      x_bin[i] <- 11
    }
  }
  return(x_bin)
}

fragment1_bin <- dna_to_bin(fragment1)
fragment2_bin <- dna_to_bin(fragment2)
fragment3_bin <- vector(mode = "numeric", length = length(fragment1))

j = 1
for (i in seq(from = 0, to = length(fragment1)-1, by = 3)) {
  for (c in 1:3) {
    fragment3_bin[i+c] <- bitwXor(fragment1_bin[i+c], fragment2_bin[j])
  }
  j = j + 1
}

fragment3_bin <- fragment3_bin[!is.na(fragment3_bin)]

fragment3 <- vector(mode = "numeric", length = length(fragment3_bin))
for (i in 1:(length(fragment3_bin))) {
  if (fragment3_bin[i] == 0) {
    fragment3[i] <- "A"
  }
  else if (fragment3_bin[i] == 1) {
    fragment3[i] <- "C"
  }
  else if (fragment3_bin[i] == 10) {
    fragment3[i] <- "G"
  }
  else {
    fragment3[i] <- "T"
  }
}

bin_to_dna <- function(x) {
  x_out <- vector(mode = "character", length = length(x))
  for (i in 1:(length(x))) {
    if (x[i] == 0) {
      x_out[i] <- "A"
    }
    else if (x[i] == 1) {
      x_out[i] <- "C"
    }
    else if (x[i] == 10) {
      x_out[i] <- "G"
    }
    else {
      x_out[i] <- "T"
    }
  }
  return(x_out)
}

fragment3 <- bin_to_dna(fragment3_bin)

# add 1% error to fragments

add_error <- function(x) {
  num_errors <- round(rnorm(1, (13/1000)*length(x)), 0)
  num_errors <- ifelse(num_errors > 0, num_errors, 0)
  
  bases <- c("A", "C", "G", "T")
  
  error_pos <- round(runif(num_errors, min = 1, max = length(x)), 0)
  
  for (i in error_pos) {
    x[i] <- bases[runif(1, min = 1, max = 4)]
  }
  
  x <- paste(x, collapse = "")
  
  return(x)
}

fragment1_err <- add_error(fragment1)
fragment2_err <- add_error(fragment2)
fragment3_err <- add_error(fragment3)

# Save encoded fragments into FASTA file

library(Biostrings)
frags <- c(fragment1_err, fragment2_err, fragment3_err) 
frags_DNA <- DNAStringSet(x = frags)
writeXStringSet(frags_DNA, "fragments.fa")

####################

# Retreiving data

frags_DNA <- readDNAStringSet("fragments.fa")

fragment1 <- frags_DNA[[1]]
fragment2 <- frags_DNA[[2]]
fragment3 <- frags_DNA[[3]]

library(stringr)
tensiSplit <- function(string,size) {
  str_extract_all(string, paste0('.{1,',size,'}'))
}

fragment1_split_3 <- unlist(tensiSplit(fragment1, 3))
fragment1_split_1 <- unlist(tensiSplit(fragment1, 1))
fragment2_split <- unlist(tensiSplit(fragment2, 1))
fragment3_split <- unlist(tensiSplit(fragment3, 1))

fragment1_bin <- dna_to_bin(fragment1_split_1)
fragment2_bin <- dna_to_bin(fragment2_split)
fragment3_bin <- dna_to_bin(fragment3_split)

# temp2
frag2_recov_bin <- bitwXor(fragment1_bin, fragment3_bin)
frag2_recov <- bin_to_dna(frag2_recov_bin[seq(1, length(frag2_recov_bin), by = 3)])

# temp1
fragment2_bin_trp <- rep(fragment2_bin, each = 3)
frag3_recov_bin <- bitwXor(fragment1_bin, fragment2_bin_trp[1:length(fragment1_bin)])
frag3_recov <- bin_to_dna(frag3_recov_bin[seq(1, length(frag3_recov_bin), by = 3)])

# recovering frag1
frag1_recov_bin <- bitwXor(frag2_recov_bin, frag3_recov_bin)
frag1_recov <- bin_to_dna(frag1_recov_bin)
frag1_recov_split <- unlist(tensiSplit(paste(frag1_recov, collapse = ""), 3))

# DNA1
DNA1 <- vector(mode = "numeric",
               length = length(fragment1_split_3))

for (i in 1:length(fragment1_split_3)) {
  DNA1[i] <- paste0(frag2_recov[i], fragment1_split_3[i])
}

DNA1 <- paste(DNA1, collapse = "")
DNA1

# DNA2
DNA2 <- vector(mode = "numeric",
               length = length(fragment1_split_3))

for (i in 1:length(fragment1_split_3)) {
  DNA2[i] <- paste0(fragment2_split[i], fragment1_split_3[i])
}

DNA2 <- paste(DNA2, collapse = "")
DNA2

# DNA3
DNA3 <- vector(mode = "numeric",
               length = length(frag1_recov_split))

for (i in 1:length(frag1_recov_split)) {
  DNA3[i] <- paste0(fragment2_split[i], frag1_recov_split[i])
}

DNA3 <- paste(DNA3, collapse = "")
DNA3

DNA_recov <- consensusString(c(DNA1, DNA2, DNA3))
# DNA_recov == DNAseq

DNA_recov
DNAseq